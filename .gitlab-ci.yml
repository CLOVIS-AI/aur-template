stages:
  - docker  # create images that are needed by the rest of the build
  - build   # create any outputs of the project (binaries, containers, charts…)
  - test    # all quality checks
  - deploy  # export the outputs (publish to an artifact registry, deploy on a server…)

include:
  - local: list.yml
  - remote: https://gitlab.com/opensavvy/ci-templates/-/raw/main/mirror.gitlab-ci.yml

variables:
  # https://gitlab.com/opensavvy/automation/containers
  ci_containers: 0.3.0

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == 'schedule'
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

build:
  image: archlinux:base-devel
  extends: [ .packages ]
  stage: build
  before_script:
    - pacman -Syuu --noconfirm
    - useradd -m builder
    - echo "builder ALL=(ALL:ALL) ALL" >>/etc/sudoers
    - echo "Defaults:builder !authenticate" >>/etc/sudoers
    - echo "PKGDEST=$(pwd)/output" >>/etc/makepkg.conf
  script:
    - mkdir -p output
    - chown -R builder output
    - cd packages/$name
    - chown -R builder .
    - sudo -u builder -- makepkg --syncdeps --noconfirm
  artifacts:
    paths:
      - output
  interruptible: true

publish:
  image: archlinux:base-devel
  stage: deploy
  # DO NOT declare a 'needs'! It needs to run in a subsequent stage to download all artifacts
  script:
    - cd output
    - >
      for file in *;
      do
        echo "Package $file → $version";
        curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file $file "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/$repo/$version/$file";
      done
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      variables:
        repo: stable
        version: latest
    - if: $CI_COMMIT_TAG
      variables:
        repo: stable
        version: $CI_COMMIT_TAG
    - when: on_success
      variables:
        repo: test
        version: $CI_PIPELINE_IID
  interruptible: false

mirror-playground:
  stage: deploy
  extends: [ .os.mirror ]
  needs: [ ]

  variables:
    url: "$playground_parent"
    name: "$playground_parent_name"
    key: "$playground_mirroring_key"
    key_public: "$playground_mirroring_key_public"

  rules:
    - if: $playground_parent == null || $playground_parent_name == null
      when: never
    - if: $playground_mirroring_key == null || $playground_mirroring_key_public == null
      when: never
    - if: $CI_PIPELINE_SOURCE == 'schedule'
    - when: manual
      allow_failure: true
