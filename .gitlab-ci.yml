stages:
  - docker  # create images that are needed by the rest of the build
  - build   # create any outputs of the project (binaries, containers, charts…)
  - test    # all quality checks
  - deploy  # export the outputs (publish to an artifact registry, deploy on a server…)

include:
  - local: list.yml
  - remote: https://gitlab.com/opensavvy/ci-templates/-/raw/main/version.gitlab-ci.yml
  - remote: https://gitlab.com/opensavvy/ci-templates/-/raw/main/mirror.gitlab-ci.yml

  - local: docs/website/.gitlab-ci.yml

variables:
  # https://gitlab.com/opensavvy/automation/containers
  ci_containers: 0.7.1

  stable_repo_name: stable
  snapshot_repo_name: test

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == 'schedule'
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

# region Package building

build:
  image: archlinux:base-devel
  extends: [ .packages ]
  stage: build
  before_script:
    - pacman -Syuu --noconfirm gnupg
    - useradd -m builder
    - echo "builder ALL=(ALL:ALL) ALL" >>/etc/sudoers
    - echo "Defaults:builder !authenticate" >>/etc/sudoers
    - echo "PKGDEST=$(pwd)/output" >>/etc/makepkg.conf
    - |
      if [[ ! -z ${package_signing_key+x} ]];
      then
          sudo -u builder gpg --import "$package_signing_key"
          echo "GPGKEY=$(gpg --show-keys --fingerprint --keyid-format=long <"$package_signing_key" | grep fingerprint | tr -d ' ' | cut -d '=' -f 2)" >>/etc/makepkg.conf
          echo "BUILDENV=(!distcc color !cccache check sign)" >>/etc/makepkg.conf
      fi
    - cat /etc/makepkg.conf
  script:
    - mkdir -p output
    - chown -R builder output
    - cd packages/$name
    - chown -R builder .
    - sudo -u builder -- makepkg --syncdeps --noconfirm
  artifacts:
    paths:
      - output
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - packages/$name/**/*
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG
  interruptible: true

# endregion
# region Package publishing

publish:
  image: archlinux:base-devel
  stage: deploy
  # DO NOT declare a 'needs'! It needs to run in a subsequent stage to download all artifacts
  before_script:
    - mkdir -p output # in case no package were built, the directory isn't created
  script:
    - cd output
    - |
      shopt -s nullglob;
      for file in *;
      do
        echo "Package $file → $version";
        curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file $file "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/$repo/$version/$file";
      done
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      variables:
        repo: $stable_repo_name
        version: latest
    - if: $CI_COMMIT_TAG
      variables:
        repo: $stable_repo_name
        version: $CI_COMMIT_TAG
  interruptible: false

update-package-database:
  image: archlinux:base-devel
  stage: deploy
  # DO NOT declare a 'needs'! It needs to run in a subsequent stage to download all artifacts
  variables:
    database: repo.db.tar.gz
  before_script:
    - pacman -Syuu --noconfirm wget
    - mkdir -p output # in case no package were built, the directory isn't created
  script:
    - 'wget --header="JOB-TOKEN: $CI_JOB_TOKEN" ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/$repo/$version/$database || true'
    - cd output
    - |
      shopt -s nullglob;
      GLOBIGNORE="*.sig"
      for file in *;
      do
        echo "Package $file → $version";
        repo-add ../$database $file;
      done
      unset GLOBIGNORE
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ../repo.db.tar.gz "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/$repo/$version/$database"'
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ../repo.db "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/$repo/$version/$repo.db"'
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ../repo.files.tar.gz "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/$repo/$version/$repo.files.tar.gz"'
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ../repo.files "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/$repo/$version/$repo.files"'
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      variables:
        repo: $stable_repo_name
        version: latest
    - if: $CI_COMMIT_TAG
      variables:
        repo: $stable_repo_name
        version: $CI_COMMIT_TAG
  artifacts:
    paths:
      - repo.db.tar.gz
  interruptible: false
  resource_group: package-database

update-packages:
  image: archlinux:base-devel
  extends: [ .packages ]
  stage: deploy
  needs: [ ]

  variables:
    key: "$playground_mirroring_key"
    key_public: "$playground_mirroring_key_public"

  before_script:
    - pacman -Syuu --noconfirm git openssh
    - git clone https://gitlab.com/opensavvy/system/dotfiles.git

  script:
    - source dotfiles/os_configure.bash
    # Set the identity
    - git config user.name 'OpenSavvy Auto-Updater'
    - git config user.email 'mirroring@opensavvy.dev'
    # Sync the packages
    - ./sync.sh $name
    - git show --name-only
    # Prepare the push
    - mkdir -p ~/.ssh
    - mv "$key" ~/.ssh/id_rsa
    - mv "$key_public" ~/.ssh/id_rsa.pub
    - cat ~/.ssh/id_rsa.pub
    - chmod 600 ~/.ssh/id_rsa
    # Add the GitLab servers to the list of known hosts (hardcoded to prevent MITM)
    - echo 'gitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9' >>~/.ssh/known_hosts
    # Generate the Telegram announce message
    - echo -e "New version of $name available\n\n<a href=\"$CI_PROJECT_URL/-/merge_requests\">Review merge requests</a>" >/tmp/telegram-msg.txt
    # Push if necessary
    - git remote set-url --push origin git@gitlab.com:$CI_PROJECT_PATH.git
    - git merge-base --is-ancestor HEAD origin/main || git push -o merge_request.create -o merge_request.target=main -o merge_request.remove_source_branch -o merge_request.title="Upgrade $name" origin "HEAD:refs/heads/upgrade-$name-$RANDOM"
    - git merge-base --is-ancestor HEAD origin/main || os_info_telegram /tmp/telegram-msg.txt "$telegram_chats"

  rules:
    - if: $playground_mirroring_key == null || $playground_mirroring_key_public == null
      when: never
    - if: $CI_PIPELINE_SOURCE == 'schedule'
    - when: manual
      allow_failure: true

# endregion
# region Automatically mirror the previous layer of the playground

mirror-playground:
  stage: deploy
  extends: [ .os.mirror ]
  needs: [ ]

  variables:
    url: "$playground_parent"
    name: "$playground_parent_name"
    key: "$playground_mirroring_key"
    key_public: "$playground_mirroring_key_public"

  rules:
    - if: $playground_parent == null || $playground_parent_name == null
      when: never
    - if: $playground_mirroring_key == null || $playground_mirroring_key_public == null
      when: never
    - if: $CI_PIPELINE_SOURCE == 'schedule'
    - when: manual
      allow_failure: true

# endregion
# region GitLab Pages

pages:
  image: alpine:latest
  stage: deploy
  needs:
    - job: mkdocs
      artifacts: true

  script:
    - mkdir -p public
    - mv docs-website public/docs

  artifacts:
    paths:
      - public

  rules:
    - if: $CI_COMMIT_TAG
  interruptible: false

# endregion
# region Kotlin pipeline

gitlab-ci.main.kts compile:
  stage: .pre
  image: registry.gitlab.com/opensavvy/automation/containers/kotlin:$ci_containers
  needs: []
  variables:
    GIT_DEPTH: 1
  script:
    - ./.gitlab-ci.main.kts >kotlin-ci.yml
  artifacts:
    paths:
      - kotlin-ci.yml
  interruptible: true

gitlab-ci.main.kts run:
  stage: .pre
  needs: [ "gitlab-ci.main.kts compile", "os.version" ]
  trigger:
    include:
      - artifact: kotlin-ci.yml
        job: "gitlab-ci.main.kts compile"
    strategy: depend
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == 'schedule'
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

# endregion
